configfile: "workflow/config.yml"


def list_idats():
    with open(config["output_dir"] + "/valid_samples.txt") as f:
        samples = [sample for sample in f.read().split('\n') if len(sample) > 0]  # we dont want empty lines
        return expand(config["output_dir"] +"/tmp_idats/{sample}_{color}.idat", sample=samples, color=["Red","Grn"])

def list_gtcs():
    with open(config["output_dir"] + "/valid_samples.txt") as f:
        samples = [sample for sample in f.read().split('\n') if len(sample) > 0]  # we dont want empty lines
        return expand(config["output_dir"] + "/tmp_gtcs/{sample}.gtc", sample=samples)

rule target:
    input: 
        stats_tsv = config["output_dir"] + "/" + config["stats_tsv_name"],
        vcf_gz = config["output_dir"] + "/" + config["vcf_gz_name"],
        csi = config["output_dir"] + "/" + config["csi_name"]


rule check_samples:
    input: 
        script = "scripts/check_samples.py",
        raw_data_dir = config["raw_data_dir"]
    params:
        output_dir = config["output_dir"]
    output: 
        config["output_dir"] + "/valid_samples.txt",
        config["output_dir"] + "/not_valid_samples.txt"
    shell:
        f"""
        python {{input.script}} \
        --idat-dir {{input.raw_data_dir}} \
        --output-dir {{params.output_dir}}
        """ 
    
rule copy_idats:
    input: 
        script = "scripts/copy_samples_parallel.sh",
        sample_list = config["output_dir"] + "/valid_samples.txt",
        raw_data_dir = config["raw_data_dir"]
    params:
        n_threads = config["threads"],
        idats_dir = directory(config["output_dir"] + "/tmp_idats")
    output:
        temp(list_idats()),
        temp(directory(config["output_dir"] + "/tmp_idats"))
    shell:
        f"""
        sh {{input.script}} \
        {{params.n_threads}} \
        {{input.sample_list}} \
        {{input.raw_data_dir}} \
        {{params.idats_dir}}
        """

rule idat_to_gtc:
    input:
        list_idats(),
        script = "scripts/idat_to_gtc.py",
        manifest_bpm = config["manifest_bpm"],
        clusterfile_egt = config["clusterfile_egt"],
        idat_dir = config["output_dir"] + "/tmp_idats",
    params:
        num_threads = config["threads"],
        gtcs_dir = directory(config["output_dir"] + "/tmp_gtcs")
    output:
        temp(list_gtcs()),
        temp(directory(config["output_dir"] + "/tmp_gtcs"))
    shell:         
        f"""
        python {{input.script}} \
            --input-bpm {{input.manifest_bpm}} \
            --input-egt {{input.clusterfile_egt}} \
            --idat-dir {{input.idat_dir}} \
            --num-threads {{params.num_threads}} \
            --output-dir {{params.gtcs_dir}}
        """

rule gtc_to_vcf:
    input:
        list_gtcs(),
        script = "scripts/gtc_to_vcf.sh",
        manifest_bpm = config["manifest_bpm"],
        manifest_csv = config["manifest_csv"],
        clusterfile_egt = config["clusterfile_egt"],
        gtc_dir = config["output_dir"] + "/tmp_gtcs", 
        ref_genome = config["ref_genome"]
    params:
        n_threads = config["threads"]
    conda: 
        "gtc_to_vcf.yml"
    output:
        stats_tsv = config["output_dir"] + "/" + config["stats_tsv_name"],
        vcf_gz = config["output_dir"] + "/" + config["vcf_gz_name"],
        csi = config["output_dir"] + "/" + config["csi_name"]
    shell:
        f"""
        sh {{input.script}} \
            {{input.manifest_bpm}} \
            {{input.manifest_csv}} \
            {{input.clusterfile_egt}} \
            {{input.gtc_dir}} \
            {{input.ref_genome}} \
            {{output.stats_tsv}} \
            {{output.vcf_gz}} \
            {{params.n_threads}} \
            {{output.csi}}
        """



